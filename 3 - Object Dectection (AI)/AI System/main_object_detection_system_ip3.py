# -*- coding: utf-8 -*-
"""Main Object Detection System - IP3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YqbYf-4aKbPEqY44hNiDwCab6bkApezQ

1 - Setup dependancies, downloads and folders
"""

import os

CUSTOM_MODEL_NAME = 'my_ssd_mobnet' 
PRETRAINED_MODEL_NAME = 'ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8'
PRETRAINED_MODEL_URL = 'http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8.tar.gz'
TF_RECORD_SCRIPT_NAME = 'generate_tfrecord.py'
LABEL_MAP_NAME = 'label_map.pbtxt'

paths = {
    'WORKSPACE_PATH': os.path.join('Tensorflow', 'workspace'),
    'SCRIPTS_PATH': os.path.join('Tensorflow','scripts'),
    'APIMODEL_PATH': os.path.join('Tensorflow','models'),
    'ANNOTATION_PATH': os.path.join('Tensorflow', 'workspace','annotations'),
    'IMAGE_PATH': os.path.join('Tensorflow', 'workspace','images'),
    'MODEL_PATH': os.path.join('Tensorflow', 'workspace','models'),
    'PRETRAINED_MODEL_PATH': os.path.join('Tensorflow', 'workspace','pre-trained-models'),
    'CHECKPOINT_PATH': os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME), 
    'OUTPUT_PATH': os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME, 'export'), 
    'TFJS_PATH':os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME, 'tfjsexport'), 
    'TFLITE_PATH':os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME, 'tfliteexport'), 
    'PROTOC_PATH':os.path.join('Tensorflow','protoc')
 }

files = {
    'PIPELINE_CONFIG':os.path.join('Tensorflow', 'workspace','models', CUSTOM_MODEL_NAME, 'pipeline.config'),
    'TF_RECORD_SCRIPT': os.path.join(paths['SCRIPTS_PATH'], TF_RECORD_SCRIPT_NAME), 
    'LABELMAP': os.path.join(paths['ANNOTATION_PATH'], LABEL_MAP_NAME)
}

path1 = os.path.join('Images', 'New_Image')
path2 = os.path.join('Images', 'Processed Images')

!mkdir -p {path1}
!mkdir -p {path2}

for path in paths.values():
    if not os.path.exists(path):
        if os.name == 'posix':
            !mkdir -p {path}
        if os.name == 'nt':
            !mkdir {path}

"""2 - Download and install pre-build Tensorflow model"""

if os.name=='nt':  
    !pip3 install wget
    import wget

if not os.path.exists(os.path.join(paths['APIMODEL_PATH'], 'research', 'object_detection')):
    !git clone https://github.com/tensorflow/models {paths['APIMODEL_PATH']}

if os.name=='posix':  
    !apt-get install protobuf-compiler
    !cd Tensorflow/models/research && protoc object_detection/protos/*.proto --python_out=. && cp object_detection/packages/tf2/setup.py . && python -m pip install . 
    
if os.name=='nt':
    url="https://github.com/protocolbuffers/protobuf/releases/download/v3.15.6/protoc-3.15.6-win64.zip"
    wget.download(url)
    !move protoc-3.15.6-win64.zip {paths['PROTOC_PATH']}
    !cd {paths['PROTOC_PATH']} && tar -xf protoc-3.15.6-win64.zip
    os.environ['PATH'] += os.pathsep + os.path.abspath(os.path.join(paths['PROTOC_PATH'], 'bin'))   
    !cd Tensorflow/models/research && protoc object_detection/protos/*.proto --python_out=. && copy object_detection\\packages\\tf2\\setup.py setup.py && python setup.py build && python setup.py install
    !cd Tensorflow/models/research/slim && pip install -e .

VERIFICATION_SCRIPT = os.path.join(paths['APIMODEL_PATH'], 'research', 'object_detection', 'builders', 'model_builder_tf2_test.py')
# Verify Installation
!python {VERIFICATION_SCRIPT}

import object_detection

if os.name =='posix':
    !wget {PRETRAINED_MODEL_URL}
    !mv {PRETRAINED_MODEL_NAME+'.tar.gz'} {paths['PRETRAINED_MODEL_PATH']}
    !cd {paths['PRETRAINED_MODEL_PATH']} && tar -zxvf {PRETRAINED_MODEL_NAME+'.tar.gz'}
if os.name == 'nt':
    wget.download(PRETRAINED_MODEL_URL)
    !move {PRETRAINED_MODEL_NAME+'.tar.gz'} {paths['PRETRAINED_MODEL_PATH']}
    !cd {paths['PRETRAINED_MODEL_PATH']} && tar -zxvf {PRETRAINED_MODEL_NAME+'.tar.gz'}

"""3 - Create LabelMap"""

labels = [{'name':'licence', 'id':1}]

with open(files['LABELMAP'], 'w') as f:
    for label in labels:
        f.write('item { \n')
        f.write('\tname:\'{}\'\n'.format(label['name']))
        f.write('\tid:{}\n'.format(label['id']))
        f.write('}\n')

"""4 - Create TF Records"""

# OPTIONAL IF RUNNING ON COLAB
ARCHIVE_FILES = os.path.join(paths['IMAGE_PATH'], 'archive.tar.gz')
if os.path.exists(ARCHIVE_FILES):
  !tar -zxvf {ARCHIVE_FILES}

if not os.path.exists(files['TF_RECORD_SCRIPT']):
    !git clone https://github.com/nicknochnack/GenerateTFRecord {paths['SCRIPTS_PATH']}

!python {files['TF_RECORD_SCRIPT']} -x {os.path.join(paths['IMAGE_PATH'], 'train')} -l {files['LABELMAP']} -o {os.path.join(paths['ANNOTATION_PATH'], 'train.record')} 
!python {files['TF_RECORD_SCRIPT']} -x {os.path.join(paths['IMAGE_PATH'], 'test')} -l {files['LABELMAP']} -o {os.path.join(paths['ANNOTATION_PATH'], 'test.record')}

"""5 - Copy Model Config to Training Folder"""

if os.name =='posix':
    !cp {os.path.join(paths['PRETRAINED_MODEL_PATH'], PRETRAINED_MODEL_NAME, 'pipeline.config')} {os.path.join(paths['CHECKPOINT_PATH'])}
if os.name == 'nt':
    !copy {os.path.join(paths['PRETRAINED_MODEL_PATH'], PRETRAINED_MODEL_NAME, 'pipeline.config')} {os.path.join(paths['CHECKPOINT_PATH'])}

"""6 - Update Config for Transfer Learning"""

import tensorflow as tf
from object_detection.utils import config_util
from object_detection.protos import pipeline_pb2
from google.protobuf import text_format

config = config_util.get_configs_from_pipeline_file(files['PIPELINE_CONFIG'])

config

pipeline_config = pipeline_pb2.TrainEvalPipelineConfig()
with tf.io.gfile.GFile(files['PIPELINE_CONFIG'], "r") as f:                                                                                                                                                                                                                     
    proto_str = f.read()                                                                                                                                                                                                                                          
    text_format.Merge(proto_str, pipeline_config)

pipeline_config.model.ssd.num_classes = len(labels)
pipeline_config.train_config.batch_size = 4
pipeline_config.train_config.fine_tune_checkpoint = os.path.join(paths['PRETRAINED_MODEL_PATH'], PRETRAINED_MODEL_NAME, 'checkpoint', 'ckpt-0')
pipeline_config.train_config.fine_tune_checkpoint_type = "detection"
pipeline_config.train_input_reader.label_map_path= files['LABELMAP']
pipeline_config.train_input_reader.tf_record_input_reader.input_path[:] = [os.path.join(paths['ANNOTATION_PATH'], 'train.record')]
pipeline_config.eval_input_reader[0].label_map_path = files['LABELMAP']
pipeline_config.eval_input_reader[0].tf_record_input_reader.input_path[:] = [os.path.join(paths['ANNOTATION_PATH'], 'test.record')]

config_text = text_format.MessageToString(pipeline_config)                                                                                                                                                                                                        
with tf.io.gfile.GFile(files['PIPELINE_CONFIG'], "wb") as f:                                                                                                                                                                                                                     
    f.write(config_text)

"""7 - Training the model"""

!pip uninstall opencv-python-headless -y
!pip uninstall opencv-python -y

!pip install opencv-python-headless==4.1.2.30
!pip install opencv-python==4.5.2.52

TRAINING_SCRIPT = os.path.join(paths['APIMODEL_PATH'], 'research', 'object_detection', 'model_main_tf2.py')

command = "python {} --model_dir={} --pipeline_config_path={} --num_train_steps=10000".format(TRAINING_SCRIPT, paths['CHECKPOINT_PATH'],files['PIPELINE_CONFIG'])

print(command)

# Blocked as the run has already been completed !{command}

"""8 - Load Train Model From Checkpoint"""

import os
import tensorflow as tf
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as viz_utils
from object_detection.builders import model_builder
from object_detection.utils import config_util

# Load pipeline config and build a detection model
configs = config_util.get_configs_from_pipeline_file(files['PIPELINE_CONFIG'])
detection_model = model_builder.build(model_config=configs['model'], is_training=False)

# Restore checkpoint
ckpt = tf.compat.v2.train.Checkpoint(model=detection_model)
ckpt.restore(os.path.join(paths['CHECKPOINT_PATH'], 'ckpt-11')).expect_partial()

@tf.function
def detect_fn(image):
    image, shapes = detection_model.preprocess(image)
    prediction_dict = detection_model.predict(image, shapes)
    detections = detection_model.postprocess(prediction_dict, shapes)
    return detections

"""9 - Detect from an Image"""

# Commented out IPython magic to ensure Python compatibility.
import cv2 
import numpy as np
from matplotlib import pyplot as plt
# %matplotlib inline

category_index = label_map_util.create_category_index_from_labelmap(files['LABELMAP'])

def record_photo():

  from IPython.display import display, Javascript
  from google.colab.output import eval_js
  from base64 import b64decode
  import random
  import datetime
  from IPython.display import Image

  photoname = str(datetime.datetime.now()) + str(random.randint(1000, 9999))

  def take_photo(filename= 'Images/New_Image/' + photoname + '.png', quality=0.8):
    js = Javascript('''
      async function takePhoto(quality) {
        const div = document.createElement('div');
        const capture = document.createElement('button');
        capture.textContent = 'Capture';
        div.appendChild(capture);

        const video = document.createElement('video');
        video.style.display = 'block';
        const stream = await navigator.mediaDevices.getUserMedia({video: true});

        document.body.appendChild(div);
        div.appendChild(video);
        video.srcObject = stream;
        await video.play();

        // Resize the output to fit the video element.
        google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);

        // Wait for Capture to be clicked.
        await new Promise((resolve) => capture.onclick = resolve);

        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        canvas.getContext('2d').drawImage(video, 0, 0);
        stream.getVideoTracks()[0].stop();
        div.remove();
        return canvas.toDataURL('image/png', quality);
      }
      ''')
    display(js)
    data = eval_js('takePhoto({})'.format(quality))
    binary = b64decode(data.split(',')[1])
    with open(filename, 'wb') as f:
      f.write(binary)
    return filename

  
  try:
    filename = take_photo()
    print('Saved to {}'.format(filename))
    
    # Show the image which was just taken.
    display(Image(filename))
  except Exception as err:
    # Errors will be thrown if the user does not have a webcam or if they do not
    # grant the page permission to access it.
    print(str(err))

record_photo()

import fnmatch

IMAGE_PATH = ''

for file in os.listdir('Images/New_Image'):
  if fnmatch.fnmatch(file, '*.png'):
        IMAGE_PATH = 'Images/New_Image/' + file

print(IMAGE_PATH)

from IPython.display import Image
from IPython.core.display import HTML 

Image(IMAGE_PATH, width=700, height=600)

img = cv2.imread(IMAGE_PATH)
image_np = np.array(img)

input_tensor = tf.convert_to_tensor(np.expand_dims(image_np, 0), dtype=tf.float32)
detections = detect_fn(input_tensor)

num_detections = int(detections.pop('num_detections'))
detections = {key: value[0, :num_detections].numpy()
              for key, value in detections.items()}
detections['num_detections'] = num_detections

# detection_classes should be ints.
detections['detection_classes'] = detections['detection_classes'].astype(np.int64)

label_id_offset = 1
image_np_with_detections = image_np.copy()

viz_utils.visualize_boxes_and_labels_on_image_array(
            image_np_with_detections,
            detections['detection_boxes'],
            detections['detection_classes']+label_id_offset,
            detections['detection_scores'],
            category_index,
            use_normalized_coordinates=True,
            max_boxes_to_draw=5,
            min_score_thresh=.8,
            agnostic_mode=False)

plt.imshow(cv2.cvtColor(image_np_with_detections, cv2.COLOR_BGR2RGB))
plt.show()

"""10 - Apply OCR to Detection"""

!pip install easyocr

!pip install torch==1.10.2+cpu torchvision==0.11.3+cpu torchaudio==0.10.2+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html

import easyocr

detection_threshold = 0.7

image = image_np_with_detections
scores = list(filter(lambda x: x> detection_threshold, detections['detection_scores']))
boxes = detections['detection_boxes'][:len(scores)]
classes = detections['detection_classes'][:len(scores)]

width = image.shape[1]
height = image.shape[0]

# Apply ROI filtering and OCR
for idx, box in enumerate(boxes):
    print(box)
    roi = box*[height, width, height, width]
    print(roi)
    region = image[int(roi[0]):int(roi[2]),int(roi[1]):int(roi[3])]
    reader = easyocr.Reader(['en'])
    ocr_result = reader.readtext(region)
    print(ocr_result)
    plt.imshow(cv2.cvtColor(region, cv2.COLOR_BGR2RGB))

for result in ocr_result:
    print(np.sum(np.subtract(result[0][2],result[0][1])))
    print(result[1])

"""11 - OCR Filtering"""

region_threshold = 0.05

def filter_text(region, ocr_result, region_threshold):
    rectangle_size = region.shape[0]*region.shape[1]
    
    plate = [] 
    for result in ocr_result:
        length = np.sum(np.subtract(result[0][1], result[0][0]))
        height = np.sum(np.subtract(result[0][2], result[0][1]))
        
        if length*height / rectangle_size > region_threshold:
            plate.append(result[1])
    return plate

text = filter_text(region, ocr_result, region_threshold)

"""12 - Bring it Together"""

region_threshold = 0.7

def ocr_it(image, detections, detection_threshold, region_threshold):
    
    # Scores, boxes and classes above threhold
    scores = list(filter(lambda x: x> detection_threshold, detections['detection_scores']))
    boxes = detections['detection_boxes'][:len(scores)]
    classes = detections['detection_classes'][:len(scores)]
    
    # Full image dimensions
    width = image.shape[1]
    height = image.shape[0]
    
    # Apply ROI filtering and OCR
    for idx, box in enumerate(boxes):
        roi = box*[height, width, height, width]
        region = image[int(roi[0]):int(roi[2]),int(roi[1]):int(roi[3])]
        reader = easyocr.Reader(['en'])
        ocr_result = reader.readtext(region)
        
        plt.imshow(cv2.cvtColor(region, cv2.COLOR_BGR2RGB))
        plt.show()
        print(text)
        return text, region

text, region = ocr_it(image_np_with_detections, detections, detection_threshold, region_threshold)

print(text)

"""13 - Save Results"""

!pip install mysql-connector-python

import mysql.connector

import mysql.connector
import random
from datetime import datetime
from datetime import datetime, timedelta


mydb = mysql.connector.connect(
  host="178.79.190.121",
  port="3306",
  user="admin",
  db = "IP3_PP",
  password="OMEGA44DAYS00#"
)

# Database connection confirmed
print(mydb)
mycursor = mydb.cursor()

# Stores current date and time
current_datetime = datetime.now()

# Parking structure ID
parking_structure_id = 1

# Finds user id with licence plate information
sql_user_id = "SELECT * FROM User_Vehicles WHERE Registeration_Plate = %s"

myresult = mycursor.execute(sql_user_id, text)
myresult = mycursor.fetchall()
user_id = myresult[0][0]

# Check if licence plate is arriving or departing
sql_arrival_id = "SELECT MAX(Arrival_Departure_ID) FROM Arrival_Departure WHERE User_ID = %s"
val_arrival_id = [(user_id)]
arrival_id_result = mycursor.execute(sql_arrival_id, val_arrival_id)
arrival_id_result = mycursor.fetchall()

arrival_id = arrival_id_result[0][0]

sql_arrival = "SELECT Arrival_Departure_ID, User_ID, Arrival_Time, Departure_Time FROM Arrival_Departure WHERE Arrival_Departure_ID = %s"
val_arrival = [(arrival_id)]
arrival_result = mycursor.execute(sql_arrival, val_arrival)
arrival_result = mycursor.fetchall()

arrival_id = arrival_id_result[0][0]

def assign_parking_space():

  sql_parking_spaces = "SELECT * FROM Parking_Spaces WHERE Parking_Structure_ID = %s AND Registeration_Plate IS NULL"
  val_parking_spaces = [(parking_structure_id)]
  parking_space_result = mycursor.execute(sql_parking_spaces, val_parking_spaces)
  parking_space_result = mycursor.fetchall()

  number_of_parking_spaces = len(parking_space_result)
  parking_space = random.choice(parking_space_result)[0]

  return parking_space

def calculate_bill():

  sql_cost_per_hour = "SELECT Cost_per_hour FROM Parking_Structure WHERE Parking_Structure_ID = %s"
  val_cost_per_hour = [(parking_structure_id)]
  cost_per_hour_result = mycursor.execute(sql_cost_per_hour, val_cost_per_hour)
  cost_per_hour_result = mycursor.fetchall()

  cost_per_hour = cost_per_hour_result[0][0]

  duration = current_datetime + timedelta(hours=0) - arrival_result[0][2]
  duration_in_s = duration.total_seconds()
  hours = divmod(duration_in_s, 3600)[0] 

  bill = float(cost_per_hour) * float(hours)

  return bill

def create_event(parking_space):

  sql_arrival_id = "SELECT MAX(Arrival_Departure_ID) FROM Arrival_Departure WHERE User_ID = %s"
  val_arrival_id = [(user_id)]
  arrival_id_result = mycursor.execute(sql_arrival_id, val_arrival_id)
  arrival_id_result = mycursor.fetchall()

  arrival_id = arrival_id_result[0][0]

  sql_arrival = "SELECT Arrival_Departure_ID, User_ID, Arrival_Time, Departure_Time FROM Arrival_Departure WHERE Arrival_Departure_ID = %s"
  val_arrival = [(arrival_id)]
  arrival_result = mycursor.execute(sql_arrival, val_arrival)
  arrival_result = mycursor.fetchall()

  arrival_time = arrival_result[0][2]
  departure_time = arrival_result[0][3]
  licence_plate = text[0]
  bill = calculate_bill()

  sql_event = "INSERT INTO Event VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
  val_event = (0, licence_plate, user_id, arrival_time, departure_time, parking_structure_id, parking_space, bill)
  mycursor.execute(sql_event, val_event)

  mydb.commit()

  print(mycursor.rowcount, "Event created.")


# Users first time arriving
if arrival_result == []:
  # Creates arrival record in database
  sql = "INSERT INTO Arrival_Departure VALUES (%s, %s, %s, %s, %s)"
  val = (0, current_datetime, current_datetime, user_id, parking_structure_id)
  mycursor.execute(sql, val)

  mydb.commit()

  print(mycursor.rowcount, "New record inserted.")
  parking_space = assign_parking_space()
  create_event(parking_space)

# Existing customer leaving
elif arrival_result[0][2] == arrival_result[0][3]:
  # Creates arrival record in database
  sql = "UPDATE Arrival_Departure SET Departure_Time = %s WHERE Arrival_Departure_ID= %s"
  val = (current_datetime, arrival_id)
  mycursor.execute(sql, val)

  mydb.commit()

  print(mycursor.rowcount, "record updated.")
  create_event(0)

# Existing customer arriving
elif arrival_result[0][3] > arrival_result[0][2]:
  # Creates arrival record in database
  sql = "INSERT INTO Arrival_Departure VALUES (%s, %s, %s, %s, %s)"
  val = (0, current_datetime, current_datetime, user_id, parking_structure_id)
  mycursor.execute(sql, val)

  mydb.commit()

  print(mycursor.rowcount, "record inserted.")
  parking_space = assign_parking_space()
  create_event(parking_space)

# Close database connection - 

mycursor.close()
mydb.close()

import os
import shutil

# Moves processed photo from New_Image to Processed
shutil.move(IMAGE_PATH, "Images/Processed/")